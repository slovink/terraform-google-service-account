parameters:
  - name: agentPool
    type: string
    default: Azure Pipelines
    values:
      - "Azure Pipelines"
      - "Slovink-Selfhosted-Agent"

trigger:
  - main

variables:
  - name: gcp_bucket
    value: slovink-hyperscaler
  - name: terraformVersion
    value: 1.9.5
  - name: authenticationFileName
    value: slovink-hyperscaler.json
  - name: projectName
    value: "Slovink hyperscaler"
  - name: projectId
    value: "slovink-hyperscaler"
  - name: platformName
    value: "google"
  - name: environment
    value: "development"
  - name: region
    value: "us-east1"
  - name: zone
    value: "us-east1-b"
  - name: agentPoolName
    value: ${{ parameters.agentPool }}

pool:
  name: $(agentPoolName)

stages:
  - stage: Prepare
    displayName: Initialization
    jobs:
      - job: prepare
        displayName: Prepare Job
        steps:
          - script: |
              echo "Installing Terraform $(terraformVersion)..."
              curl -sLo terraform.zip https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
              unzip -o terraform.zip
              sudo mv terraform /usr/local/bin/
              terraform version
              which terraform
            displayName: "Install & Verify Terraform"


          - script: |
              rm -rf *
            displayName: Clean working directory

          - task: DownloadSecureFile@1
            name: development
            displayName: 'Download GCP Service Account Key'
            inputs:
              secureFile: $(authenticationFileName)

          - script: |
              cp $(development.secureFilePath) .
            displayName: Copy service account key to working dir

  - stage: service_account
    dependsOn: Prepare
    displayName: Service Account Provisioning
    jobs:
      - job: service_account
        displayName: Terraform Job
        steps:
          - task: TerraformInstaller@0
            displayName: "Install Terraform"
            inputs:
              terraformVersion: '$(terraformVersion)'

          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
              command: init
              workingDirectory: $(System.DefaultWorkingDirectory)/example
              backendType: gcs
              backendGcsCredentials: $(authenticationFileName)
              backendGcsBucket: $(gcp_bucket)
              backendGcsPrefix: $(projectId)/$(platformName)/network.infrax.tfstate

          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: Terraform Plan
            inputs:
              command: plan
              workingDirectory: $(System.DefaultWorkingDirectory)/example
              providerGoogleCredentials: $(authenticationFileName)
              providerGoogleProject: $(projectName)
              providerGoogleRegion: $(region)
              commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/terraform.tfvars"'

          - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: Terraform Apply
            inputs:
              command: apply
              workingDirectory: $(System.DefaultWorkingDirectory)/example
              providerGoogleCredentials: $(authenticationFileName)
              providerGoogleProject: $(projectName)
              providerGoogleRegion: $(region)
              commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/terraform.tfvars"'
